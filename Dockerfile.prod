# Install dependencies only when needed
FROM node:16-alpine AS base
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# If using npm with a `package-lock.json` comment out above and use below instead
COPY package.json package-lock.json ./ 

# build layer to build our website
FROM base as build
# Removes node_modules and install all dependencies at once
RUN export NODE_ENV=production
ENV NODE_OPTIONS --max-old-space-size=4096
ENV GENERATE_SOURCEMAP false
RUN npm install

# Copy the rest of our Next.js folder
COPY . .
RUN npx prisma generate
RUN npm run build

# prod-build layer
FROM base as prod-build

RUN npm install --production
COPY prisma prisma
RUN npx prisma generate
RUN cp -R node_modules prod_node_modules

# prod layer
FROM base as prod

COPY --from=prod-build /app/prod_node_modules /app/node_modules
COPY --from=build  /app/.next /app/.next
COPY --from=build  /app/public /app/public
COPY --from=build  /app/prisma /app/prisma

# Ensure port 80 is accessible to our system
EXPOSE 80

# Run npm start, as we would via the command line 
CMD ["npm", "start"]